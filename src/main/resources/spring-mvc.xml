<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                         http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!--启用spring的一些annotation -->
	<context:annotation-config />
	
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	
	<!--  <mvc:default-servlet-handler />
	 这个标签起作用的前提就是需要我们把静态资源放在webapp下，而非WEB-INF下，否则还是会无效
	(解除servlet对静态资源文件访问的限制，使得静态资源先经过)
	default-servlet-handler将在SpringMVC上下文中定义一个DefaultServletHttpRequestHandler,
	它会对进入DispatcherServlet的请求进行筛查。
	如果发现是没有经过映射的请求，就将该请求交由WEB应用服务器默认的Servlet进行处理。
	如果不是静态资源的请求，才由DispatcherServlet继续进行处理。 -->
	
	
	<!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
	<mvc:annotation-driven />

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com"/>

	<!--HandlerMapping 无需配置，springmvc可以默认启动 -->

	<!--静态资源映射 -->
	<!--本项目把静态资源放在了WEB-INF的statics目录下，资源映射如下 -->
	<mvc:resources mapping="/css/**" location="/" />
	<mvc:resources mapping="/js/**" location="/" />
	<mvc:resources mapping="/image/**" location="/" />
	<mvc:resources mapping="/*.html" location="/"/>
	

	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP -->
	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/" /><!--设置JSP文件的目录位置 -->
		<property name="suffix" value=".jsp" />
	</bean>
 
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
          p:driverClass="${dataSource.driver}"
          p:jdbcUrl="${dataSource.url}"
          p:user="${dataSource.username}"
          p:password="${dataSource.password}"
          p:idleConnectionTestPeriod="${dataSource.idleConnectionTestPeriod}"
          p:maxIdleTime="${dataSource.maxIdleTime}"
          p:acquireIncrement="${dataSource.acquireIncrement}"
          p:initialPoolSize="${dataSource.initialPoolSize}"
          p:maxPoolSize="${dataSource.maxPoolSize}"
          p:autoCommitOnClose="${dataSource.autoCommitOnClose}"
          p:checkoutTimeout="${dataSource.checkoutTimeout}"
          p:acquireRetryAttempts="${dataSource.acquireRetryAttempts}"
          p:preferredTestQuery="SELECT 1"
          p:maxConnectionAge="3000"/>
    
    <!-- mybatis文件配置，扫描所有mapper文件，会利用反射和动态代理创建实现相应mapper接口的代理类  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
 
        <property name="typeAliasesPackage" value="com.model"/>
 
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>
    
 	<!-- spring与mybatis整合配置，扫描所有dao,指定的映射器类是接口,接口方法可以用注解来指定 SQL 语句,
 		但是 MyBatis 的映射器 XML 文件也可以用。 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.dao"
          p:sqlSessionFactoryBeanName="sqlSessionFactory"/>
    
</beans>